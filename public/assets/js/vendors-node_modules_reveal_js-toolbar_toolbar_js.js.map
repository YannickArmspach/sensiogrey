{"version":3,"sources":["webpack://linotype/./node_modules/reveal.js-toolbar/toolbar.js"],"names":[],"mappings":";;;;;;;;AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,0DAA0D;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,4DAA4D,wBAAwB;AACpF;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA,WAAW;AACX;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,YAAY;AAC3B,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,cAAc;AACd,GAAG","file":"js/vendors-node_modules_reveal_js-toolbar_toolbar_js.js","sourcesContent":["/*\n * Reveal.js toolbar plugin\n * MIT licensed\n * (c) Greg Denehy 2017\n */\n\n/* TODO:\n * \t\t- Fix issue with toolbar access after using overview button\n *\t\t- Reimplement auto slide button to allow restyling ?\n * \t\t- Notes ?\n * \t\t- PDF export ?\n *\t\t- custom buttons\n *\t\t- tooltips\n */\n\nvar RevealToolbar =\n  window.RevealToolbar ||\n  (function() {\n    var ieVersion = (function() {\n      var browser = /(msie) ([\\w.]+)/.exec(\n        window.navigator.userAgent.toLowerCase()\n      );\n      if (browser && browser[1] === 'msie') {\n        return parseFloat(browser[2]);\n      }\n      return null;\n    })();\n\n    var config = Reveal.getConfig();\n    var options = config.toolbar || {};\n    options.path = options.path || scriptPath() || 'plugin/toolbar/';\n    if (!options.path.endsWith('/')) {\n      options.path += '/';\n    }\n    var loadIcons = options.loadIcons;\n    if (typeof loadIcons === 'undefined') loadIcons = true;\n\n    // Cached references to DOM elements\n    var dom = {};\n\n    loadResource(\n      options.path + '/toolbar.css',\n      'stylesheet',\n      'toolbar-defaults',\n      function() {\n        loadResource(\n          options.path + '/lib/screenfull/screenfull.min.js',\n          'script',\n          null,\n          function() {\n            if (loadIcons) {\n              loadResource(\n                options.path +\n                  '/font-awesome-5.0.2/css/fontawesome-all.min.css',\n                'stylesheet',\n                '',\n                loadPlugin\n              );\n            } else {\n              loadPlugin();\n            }\n          }\n        );\n      }\n    );\n\n    function loadPlugin() {\n      // does not support IE8 or below\n      var initialise = !ieVersion || ieVersion >= 9;\n\n      // does not support IE8 or below\n      if (initialise) {\n        function option(opt, def) {\n          if (typeof opt === 'undefined') return def;\n          return opt;\n        }\n\n        //\n        // Set option defaults\n        //\n        var position = option(options.position, 'bottom'); // 'top' or 'bottom'\n        var showFullscreen = option(options.fullscreen, false);\n        var showOverview = option(options.overview, false);\n        var showPause = option(options.pause, false);\n        var showNotes = option(options.notes, false);\n        var showHelp = option(options.help, false);\n        var captureMenu = option(options.captureMenu, true);\n        var capturePlaybackControl = option(\n          options.capturePlaybackControl,\n          true\n        );\n\n        // Cache references to key DOM elements\n        dom.reveal = document.querySelector('.reveal');\n        dom.toolbar = document.querySelector('.reveal-toolbar');\n\n        if (!dom.toolbar) {\n          dom.toolbar = createNode(dom.reveal, 'div', 'reveal-toolbar', null);\n        } else {\n          // move the existing toolbar after the other Reveal components\n          dom.reveal.appendChild(dom.toolbar);\n        }\n\n        dom.toolbar.classList.add(\n          position == 'top' ? 'reveal-toolbar-top' : 'reveal-toolbar-bottom'\n        );\n\n        function createToolbarButton(icon, cb) {\n          var button = createNode(\n            dom.toolbar,\n            'a',\n            'reveal-toolbar-button',\n            null\n          );\n          button.setAttribute('href', '#');\n          button.onclick = function(event) {\n            event.preventDefault();\n            cb(event);\n          };\n          createNode(button, 'i', ['fa', icon]);\n          return button;\n        }\n\n        if (showOverview) {\n          dom.overviewButton = createToolbarButton(\n            'fa-th-large',\n            Reveal.toggleOverview\n          );\n        }\n\n        if (showHelp) {\n          dom.helpButton = createToolbarButton(\n            'fa-question',\n            Reveal.toggleHelp\n          );\n        }\n\n        if (showNotes && !Reveal.isSpeakerNotes()) {\n          createToolbarButton('fa-list-alt', function() {\n            if (RevealNotes) {\n              RevealNotes.open();\n            }\n          });\n          // createToolbarButton('fa-list-alt', function() { Reveal.triggerKey(83) });\n        }\n\n        if (showFullscreen) {\n          dom.fullscreenButton = createToolbarButton('fa-expand', function() {\n            if (screenfull.enabled) {\n              screenfull.toggle(document.documentElement);\n            }\n          });\n        }\n\n        // set fullscreen button icon to match fullscreen state\n        if (screenfull.enabled) {\n          screenfull.on('change', function() {\n            var icon = dom.fullscreenButton.querySelector('i');\n            icon.classList.remove(\n              screenfull.isFullscreen ? 'fa-expand' : 'fa-compress'\n            );\n            icon.classList.add(\n              screenfull.isFullscreen ? 'fa-compress' : 'fa-expand'\n            );\n          });\n        }\n\n        if (showPause) {\n          dom.pauseButton = createToolbarButton(\n            'fa-eye-slash',\n            Reveal.togglePause\n          );\n          dom.pauseButton.classList.add('reveal-toolbar-pause-button');\n          Reveal.addEventListener('paused', function() {\n            var icon = dom.pauseButton.querySelector('i');\n            icon.classList.remove('fa-eye-slash');\n            icon.classList.add('fa-eye');\n          });\n          Reveal.addEventListener('resumed', function() {\n            var icon = dom.pauseButton.querySelector('i');\n            icon.classList.remove('fa-eye');\n            icon.classList.add('fa-eye-slash');\n          });\n        }\n\n        if (captureMenu) {\n          // handle async loading of plugins\n          var id_menu = setInterval(function() {\n            if (RevealMenu && RevealMenu.isInit()) {\n              dom.menu = document.querySelector('div.slide-menu-button');\n              if (dom.menu) {\n                console.log('Moving menu button');\n                dom.toolbar.insertBefore(dom.menu, dom.toolbar.firstChild);\n                dom.menu.classList.add('reveal-toolbar-button');\n              }\n              clearInterval(id_menu);\n            }\n          }, 50);\n        }\n\n        if (capturePlaybackControl) {\n          dom.playback = document.querySelector('canvas.playback');\n          if (dom.playback) {\n            console.log('Moving playback control');\n            dom.toolbar.appendChild(dom.playback);\n          }\n        }\n\n        // place default footer stylesheet before first footer stylesheet to ensure footer styles override defaults\n        var defaultStylesheet = document.querySelector('#toolbar-defaults');\n        var themeStylesheet = document.querySelector('.toolbar-theme');\n        if (themeStylesheet) {\n          themeStylesheet.parentElement.insertBefore(\n            defaultStylesheet,\n            themeStylesheet\n          );\n        }\n\n        /**\n         * Extend object a with the properties of object b.\n         * If there's a conflict, object b takes precedence.\n         */\n        function extend(a, b) {\n          for (var i in b) {\n            a[i] = b[i];\n          }\n        }\n\n        /**\n         * Dispatches an event of the specified type from the\n         * reveal DOM element.\n         */\n        function dispatchEvent(type, args) {\n          var event = document.createEvent('HTMLEvents', 1, 2);\n          event.initEvent(type, true, true);\n          extend(event, args);\n          document.querySelector('.reveal').dispatchEvent(event);\n\n          // If we're in an iframe, post each reveal.js event to the\n          // parent window. Used by the notes plugin\n          if (config.postMessageEvents && window.parent !== window.self) {\n            window.parent.postMessage(\n              JSON.stringify({\n                namespace: 'reveal',\n                eventName: type,\n                state: getState()\n              }),\n              '*'\n            );\n          }\n        }\n\n        dispatchEvent('toolbar-ready');\n      }\n    }\n\n    // modified from math plugin\n    function loadResource(url, type, id, callback) {\n      var head = document.querySelector('head');\n      var resource;\n\n      if (type === 'script') {\n        resource = document.createElement('script');\n        resource.type = 'text/javascript';\n        resource.src = url;\n        if (id) resource.id = id;\n      } else if (type === 'stylesheet') {\n        resource = document.createElement('link');\n        resource.rel = 'stylesheet';\n        resource.href = url;\n        if (id) resource.id = id;\n      }\n\n      // Wrapper for callback to make sure it only fires once\n      var finish = function() {\n        if (typeof callback === 'function') {\n          callback.call();\n          callback = null;\n        }\n      };\n\n      resource.onload = finish;\n\n      // IE\n      resource.onreadystatechange = function() {\n        if (this.readyState === 'loaded') {\n          finish();\n        }\n      };\n\n      // Normal browsers\n      head.appendChild(resource);\n    }\n\n    function scriptPath() {\n      // obtain plugin path from the script element\n      var path;\n      if (document.currentScript) {\n        path = document.currentScript.src.slice(0, -10);\n      } else {\n        var sel = document.querySelector('script[src$=\"toolbar.js\"]');\n        if (sel) {\n          path = sel.src.slice(0, -10);\n        }\n      }\n      return path;\n    }\n\n    // polyfill\n    if (!String.prototype.startsWith) {\n      String.prototype.startsWith = function(searchString, position) {\n        return this.substr(position || 0, searchString.length) === searchString;\n      };\n    }\n    if (!String.prototype.endsWith) {\n      String.prototype.endsWith = function(search, this_len) {\n        if (this_len === undefined || this_len > this.length) {\n          this_len = this.length;\n        }\n        return this.substring(this_len - search.length, this_len) === search;\n      };\n    }\n\n    /**\n     * Creates an HTML element and returns a reference to it.\n     *\n     * @param {HTMLElement} container\n     * @param {string} tagname\n     * @param {string} classname\n     * @param {string} innerHTML\n     *\n     * @return {HTMLElement}\n     */\n    function createNode(container, tagname, classname, innerHTML) {\n      var node = document.createElement(tagname);\n      if (classname) {\n        if (Array.isArray(classname)) {\n          classname.forEach(function(c) {\n            node.classList.add(c);\n          });\n        } else {\n          node.classList.add(classname);\n        }\n      }\n      if (typeof innerHTML === 'string') {\n        node.innerHTML = innerHTML;\n      }\n      container.appendChild(node);\n\n      return node;\n    }\n\n    return {}; // API\n  })();\n"],"sourceRoot":""}